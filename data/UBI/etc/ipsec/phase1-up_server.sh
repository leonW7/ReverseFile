#!/bin/sh

#
# sa-up.sh local configuration for a new SA
#
#PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

case `uname -s` in
NetBSD)
	DEFAULT_GW=`netstat -rn | awk '($1 == "default"); END{print $2}'`
	;;
Linux)
	DEFAULT_GW=`netstat -rn | awk '($1 == "0.0.0.0"); END{print $2}'`
	;;
esac

echo $@
echo "LOCAL_ADDR = ${LOCAL_ADDR}"
echo "LOCAL_PORT = ${LOCAL_PORT}"
echo "REMOTE_ADDR = ${REMOTE_ADDR}"
echo "REMOTE_PORT = ${REMOTE_PORT}"
echo "DEFAULT_GW = ${DEFAULT_GW}"
echo "INTERNAL_ADDR4 = ${INTERNAL_ADDR4}"
echo "INTERNAL_DNS4 = ${INTERNAL_DNS4}"
echo "NATT_PEER_PORT = ${NATT_PEER_PORT}" > /var/file
echo "LOCAL_LAN = ${LOCAL_LAN}"
echo "LOCAL_SUBNET = ${LOCAL_SUBNET}"

#echo ${INTERNAL_ADDR4} | grep '[0-9]' > /dev/null || exit 0
#echo ${DEFAULT_GW} | grep '[0-9]' > /dev/null || exit 0

#test -f /etc/resolv.conf.bak || cp /etc/resolv.conf /etc/resolv.conf.bak
#echo "# Generated by racoon on `date`" > /etc/resolv.conf
#echo "nameserver ${INTERNAL_DNS4}" >> /etc/resolv.conf

#case `uname -s` in
#NetBSD)
#	if=`netstat -rn|awk '($1 == "default"); END{print $7}'`
#	ifconfig ${if} alias ${INTERNAL_ADDR4}
#	route delete default
#	route add default ${DEFAULT_GW} -ifa ${INTERNAL_ADDR4}
#	;;
#Linux)
#	if=`netstat -rn|awk '($1 == "0.0.0.0"); END{print $8}'`
#	ifconfig ${if}:1 ${INTERNAL_ADDR4}      
#	route del default
# TF1: Don't add default gw, instead of this need to add gateway for peer n/w
#      ex: route add -net <PEER_NW> netmask <MASK> dev eth0:1
#	;;
#esac

# Use this for a NAT-T setup
LOCAL="${LOCAL_ADDR}[${LOCAL_PORT}]"
REMOTE="${REMOTE_ADDR}[${REMOTE_PORT}]"
#CLIENT_POOL_IP="${LOCAL_LAN}/${LOCAL_SUBNET}"
# Use this for a non NAT-T setup
#LOCAL="${LOCAL_ADDR}"
#REMOTE="${REMOTE_ADDR}"

#route add -net ${INTERNAL_ADDR4} netmask 255.255.255.255 gw ${REMOTE_ADDR}

# setting big SP lifetime value(10 days), ideally it should be ipsec SA Lifetime
# but since we wont't know the ipsec SA lifetime here(after ph1, not yet ph2 is
# started), so we are setting this big value.

if [ -z $NATT_PEER_PORT ]; then
     echo "spdadd ${INTERNAL_ADDR4}[any] ${LOCAL_LAN}/${LOCAL_SUBNET} any -forward 1 -hlt 864000 -P in ipsec
         esp/tunnel/${REMOTE_ADDR}-${LOCAL_ADDR}/require;" | setkey -c
     echo "spdadd ${LOCAL_LAN}/${LOCAL_SUBNET} ${INTERNAL_ADDR4}[any] any -forward 1 -hlt 864000 -P out ipsec
         esp/tunnel/${LOCAL_ADDR}-${REMOTE_ADDR}/require;" | setkey -c
else
    echo "spdadd ${INTERNAL_ADDR4}[any] ${LOCAL_LAN}/${LOCAL_SUBNET} any -forward 1 -hlt 864000 -P in ipsec
         esp/tunnel/${REMOTE_ADDR}-${LOCAL_ADDR}/unique:$NATT_PEER_PORT;" | setkey -c
    echo "spdadd ${LOCAL_LAN}/${LOCAL_SUBNET} ${INTERNAL_ADDR4}[any] any -forward 1 -hlt 864000 -P out ipsec
        esp/tunnel/${LOCAL_ADDR}-${REMOTE_ADDR}/unique:$NATT_PEER_PORT;" | setkey -c
fi

#
# XXX This is a workaround for Linux forward policies problem. 
# Someone familiar with forward policies please fix this properly.
#
#case `uname -s` in
#Linux)
#	echo "
#	spddelete 0.0.0.0/0[any] ${INTERNAL_ADDR4}[any] any
#		-P fwd ipsec esp/tunnel/${REMOTE_ADDR}-${LOCAL_ADDR}/require;
#	" | setkey -c
#	;;
#esac
